!function(e){var t={};function s(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(i,n,function(t){return e[t]}.bind(null,n));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const i=new WeakMap,n=e=>"function"==typeof e&&i.has(e),a=void 0!==window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,o=(e,t,s=null)=>{for(;t!==s;){const s=t.nextSibling;e.removeChild(t),t=s}},r={},l={},u=`{{lit-${String(Math.random()).slice(2)}}}`,c=`\x3c!--${u}--\x3e`,d=new RegExp(`${u}|${c}`),m="$lit$";class h{constructor(e,t){this.parts=[],this.element=t;const s=[],i=[],n=document.createTreeWalker(t.content,133,null,!1);let a=0,o=-1,r=0;const{strings:l,values:{length:c}}=e;for(;r<c;){const e=n.nextNode();if(null!==e){if(o++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:s}=t;let i=0;for(let e=0;e<s;e++)p(t[e].name,m)&&i++;for(;i-- >0;){const t=l[r],s=g.exec(t)[2],i=s.toLowerCase()+m,n=e.getAttribute(i);e.removeAttribute(i);const a=n.split(d);this.parts.push({type:"attribute",index:o,name:s,strings:a}),r+=a.length-1}}"TEMPLATE"===e.tagName&&(i.push(e),n.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(u)>=0){const i=e.parentNode,n=t.split(d),a=n.length-1;for(let t=0;t<a;t++){let s,a=n[t];if(""===a)s=f();else{const e=g.exec(a);null!==e&&p(e[2],m)&&(a=a.slice(0,e.index)+e[1]+e[2].slice(0,-m.length)+e[3]),s=document.createTextNode(a)}i.insertBefore(s,e),this.parts.push({type:"node",index:++o})}""===n[a]?(i.insertBefore(f(),e),s.push(e)):e.data=n[a],r+=a}}else if(8===e.nodeType)if(e.data===u){const t=e.parentNode;null!==e.previousSibling&&o!==a||(o++,t.insertBefore(f(),e)),a=o,this.parts.push({type:"node",index:o}),null===e.nextSibling?e.data="":(s.push(e),o--),r++}else{let t=-1;for(;-1!==(t=e.data.indexOf(u,t+1));)this.parts.push({type:"node",index:-1}),r++}}else n.currentNode=i.pop()}for(const e of s)e.parentNode.removeChild(e)}}const p=(e,t)=>{const s=e.length-t.length;return s>=0&&e.slice(s)===t},v=e=>-1!==e.index,f=()=>document.createComment(""),g=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
class _{constructor(e,t,s){this.__parts=[],this.template=e,this.processor=t,this.options=s}update(e){let t=0;for(const s of this.__parts)void 0!==s&&s.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=a?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],s=this.template.parts,i=document.createTreeWalker(e,133,null,!1);let n,o=0,r=0,l=i.nextNode();for(;o<s.length;)if(n=s[o],v(n)){for(;r<n.index;)r++,"TEMPLATE"===l.nodeName&&(t.push(l),i.currentNode=l.content),null===(l=i.nextNode())&&(i.currentNode=t.pop(),l=i.nextNode());if("node"===n.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(l.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(l,n.name,n.strings,this.options));o++}else this.__parts.push(void 0),o++;return a&&(document.adoptNode(e),customElements.upgrade(e)),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const b=` ${u} `;class x{constructor(e,t,s,i){this.strings=e,this.values=t,this.type=s,this.processor=i}getHTML(){const e=this.strings.length-1;let t="",s=!1;for(let i=0;i<e;i++){const e=this.strings[i],n=e.lastIndexOf("\x3c!--");s=(n>-1||s)&&-1===e.indexOf("--\x3e",n+1);const a=g.exec(e);t+=null===a?e+(s?b:c):e.substr(0,a.index)+a[1]+a[2]+m+a[3]+u}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");return e.innerHTML=this.getHTML(),e}}
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const w=e=>null===e||!("object"==typeof e||"function"==typeof e),y=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class N{constructor(e,t,s){this.dirty=!0,this.element=e,this.name=t,this.strings=s,this.parts=[];for(let e=0;e<s.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new S(this)}_getValue(){const e=this.strings,t=e.length-1;let s="";for(let i=0;i<t;i++){s+=e[i];const t=this.parts[i];if(void 0!==t){const e=t.value;if(w(e)||!y(e))s+="string"==typeof e?e:String(e);else for(const t of e)s+="string"==typeof t?t:String(t)}}return s+=e[t],s}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class S{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===r||w(e)&&e===this.value||(this.value=e,n(e)||(this.committer.dirty=!0))}commit(){for(;n(this.value);){const e=this.value;this.value=r,e(this)}this.value!==r&&this.committer.commit()}}class q{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(f()),this.endNode=e.appendChild(f())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=f()),e.__insert(this.endNode=f())}insertAfterPart(e){e.__insert(this.startNode=f()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){for(;n(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=r,e(this)}const e=this.__pendingValue;e!==r&&(w(e)?e!==this.value&&this.__commitText(e):e instanceof x?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):y(e)?this.__commitIterable(e):e===l?(this.value=l,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,s="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=s:this.__commitNode(document.createTextNode(s)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof _&&this.value.template===t)this.value.update(e.values);else{const s=new _(t,e.processor,this.options),i=s._clone();s.update(e.values),this.__commitNode(i),this.value=s}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let s,i=0;for(const n of e)s=t[i],void 0===s&&(s=new q(this.options),t.push(s),0===i?s.appendIntoPart(this):s.insertAfterPart(t[i-1])),s.setValue(n),s.commit(),i++;i<t.length&&(t.length=i,this.clear(s&&s.endNode))}clear(e=this.startNode){o(this.startNode.parentNode,e.nextSibling,this.endNode)}}class V{constructor(e,t,s){if(this.value=void 0,this.__pendingValue=void 0,2!==s.length||""!==s[0]||""!==s[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=s}setValue(e){this.__pendingValue=e}commit(){for(;n(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=r,e(this)}if(this.__pendingValue===r)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=r}}class C extends N{constructor(e,t,s){super(e,t,s),this.single=2===s.length&&""===s[0]&&""===s[1]}_createPart(){return new E(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class E extends S{}let P=!1;try{const e={get capture(){return P=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}class M{constructor(e,t,s){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=s,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;n(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=r,e(this)}if(this.__pendingValue===r)return;const e=this.__pendingValue,t=this.value,s=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),i=null!=e&&(null==t||s);s&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),i&&(this.__options=T(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=r}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const T=e=>e&&(P?{capture:e.capture,passive:e.passive,once:e.once}:e.capture);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const k=new class{handleAttributeExpressions(e,t,s,i){const n=t[0];if("."===n){return new C(e,t.slice(1),s).parts}return"@"===n?[new M(e,t.slice(1),i.eventContext)]:"?"===n?[new V(e,t.slice(1),s)]:new N(e,t,s).parts}handleTextExpression(e){return new q(e)}};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */function A(e){let t=L.get(e.type);void 0===t&&(t={stringsArray:new WeakMap,keyString:new Map},L.set(e.type,t));let s=t.stringsArray.get(e.strings);if(void 0!==s)return s;const i=e.strings.join(u);return s=t.keyString.get(i),void 0===s&&(s=new h(e,e.getTemplateElement()),t.keyString.set(i,s)),t.stringsArray.set(e.strings,s),s}const L=new Map,R=new WeakMap,I=(e,t,s)=>{let i=R.get(t);void 0===i&&(o(t,t.firstChild),R.set(t,i=new q(Object.assign({templateFactory:A},s))),i.appendInto(t)),i.setValue(e),i.commit()};
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.1.2");const D=(e,...t)=>new x(e,t,"html",k),j=e=>{document.body.addEventListener("click",t=>{if(t.defaultPrevented||0!==t.button||t.metaKey||t.ctrlKey||t.shiftKey)return;const s=t.composedPath().filter(e=>"A"===e.tagName)[0];if(!s||s.target||s.hasAttribute("download")||"external"===s.getAttribute("rel"))return;const i=s.href;if(!i||-1!==i.indexOf("mailto:"))return;const n=window.location,a=n.origin||n.protocol+"//"+n.host;0===i.indexOf(a)&&(t.preventDefault(),i!==n.href&&(window.history.pushState({},"",i),e(n,t)))}),window.addEventListener("popstate",t=>e(window.location,t)),e(window.location,null)};class O extends HTMLElement{constructor(){super(),this._shadowRoot=this.attachShadow({mode:"open"})}connectedCallback(){I(this.template(),this._shadowRoot,{eventContext:this})}template(){return D`
      <section>
        <h2>Some landing page content goes here</h2>
        <p>
          Quisque porta metus in tortor vulputate tempus. Maecenas finibus, nulla vitae feugiat porta, enim felis malesuada tellus, et efficitur sapien lectus sed metus. Vivamus non faucibus elit. Morbi finibus turpis eu tincidunt vulputate. Cras pharetra risus diam, sit amet vehicula augue eleifend ut. Sed non venenatis libero. Curabitur auctor arcu sagittis libero gravida, nec sodales tortor vulputate. Vivamus risus mi, scelerisque sit amet pharetra ac, fringilla a odio. Suspendisse aliquet ultrices luctus. Phasellus fringilla, est in pellentesque venenatis, dui mauris tempor ligula, in maximus velit enim vitae nulla.

Suspendisse congue sodales est. Suspendisse nisl ex, consectetur vel cursus sed, cursus sit amet sapien. Cras consequat massa venenatis nunc volutpat lobortis. Donec ornare blandit diam eget efficitur. Cras varius aliquet leo, nec finibus odio tincidunt non. Pellentesque mauris massa, accumsan quis tortor vitae, consectetur sollicitudin massa. Fusce eget vestibulum lacus, nec mollis orci. Vestibulum mauris velit, luctus vel lorem luctus, luctus porttitor dolor. Aenean iaculis ex eu ornare malesuada. Donec pellentesque lorem sit amet nisi congue, sit amet fringilla urna euismod. Vivamus consectetur mauris eu ligula blandit tristique. Nullam arcu mi, accumsan sit amet ipsum nec, scelerisque malesuada nisl.
        </p>
      </section>
      `}}customElements.define("home-view",O);class $ extends HTMLElement{constructor(){super(),this._shadowRoot=this.attachShadow({mode:"open"})}connectedCallback(){I(this.template(),this._shadowRoot,{eventContext:this})}template(){return D`
      <section>
        <h2>Implement Coverages content here</h2>
        <p>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nunc tellus, fringilla id vestibulum vel, interdum et enim. Nulla vehicula arcu in eros faucibus, quis ultrices tellus semper. Nulla ut ante libero. Cras ut tortor in enim eleifend pharetra. Duis vulputate scelerisque felis, vel malesuada mauris sollicitudin in. Maecenas nisi ligula, mollis consectetur lacinia at, mollis vel augue. Mauris id ante vulputate, condimentum turpis sollicitudin, volutpat erat. Proin at turpis non neque viverra mattis non eu turpis. Curabitur in mi lacinia, mollis lorem ut, molestie eros. In vel iaculis tortor. Curabitur bibendum suscipit tortor ac egestas.

Quisque porta metus in tortor vulputate tempus. Maecenas finibus, nulla vitae feugiat porta, enim felis malesuada tellus, et efficitur sapien lectus sed metus. Vivamus non faucibus elit. Morbi finibus turpis eu tincidunt vulputate. Cras pharetra risus diam, sit amet vehicula augue eleifend ut. Sed non venenatis libero. Curabitur auctor arcu sagittis libero gravida, nec sodales tortor vulputate. Vivamus risus mi, scelerisque sit amet pharetra ac, fringilla a odio. Suspendisse aliquet ultrices luctus. Phasellus fringilla, est in pellentesque venenatis, dui mauris tempor ligula, in maximus velit enim vitae nulla.
        </p>
      </section>
      `}}customElements.define("coverages-view",$);class H extends HTMLElement{constructor(){super(),this._shadowRoot=this.attachShadow({mode:"open"})}connectedCallback(){I(this.template(),this._shadowRoot,{eventContext:this})}template(){return D`
      <section>
        <h2>Business Info view here</h2>
        <p>
          Donec maximus nulla risus, a euismod mauris ornare quis. Maecenas interdum lorem vitae felis convallis, eu fermentum eros sagittis. Integer vel metus id sem faucibus hendrerit. Duis in vulputate nisl. Curabitur a tincidunt justo. Praesent tincidunt tortor in lectus semper mattis. Nullam at facilisis nisi. Praesent eget enim ultrices, imperdiet felis a, fringilla risus. Integer faucibus ut enim nec dignissim. Sed congue ex nisl, vel fringilla metus finibus at. Duis sed iaculis elit. Interdum et malesuada fames ac ante ipsum primis in faucibus. Proin at blandit lorem. Etiam sollicitudin augue et odio maximus ullamcorper eu ac lorem.

Vivamus pretium erat dolor, sit amet semper metus gravida in. Vivamus porta sit amet dolor vel consequat. Aenean mattis, erat eu rhoncus volutpat, quam nibh venenatis lorem, laoreet lobortis neque neque ut tellus. Phasellus varius maximus elementum. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam ultricies nibh sed hendrerit mollis. Donec accumsan arcu non felis auctor, at sollicitudin neque mattis. Donec sagittis orci dolor, eu laoreet leo congue sed. Nam sodales nec justo id fringilla. Mauris mi orci, vulputate et efficitur id, pharetra eu ex. Nullam vel orci lobortis, pharetra mauris eget, varius sem. Proin quis gravida nisi.
        </p>
      </section>
      `}}customElements.define("businessinfo-view",H);class F extends HTMLElement{constructor(){super(),this._shadowRoot=this.attachShadow({mode:"open"})}connectedCallback(){I(this.template(),this._shadowRoot,{eventContext:this})}template(){return D`
      <section>
        <h2>Operations content goes here</h2>
        <p>
          Quisque porta metus in tortor vulputate tempus. Maecenas finibus, nulla vitae feugiat porta, enim felis malesuada tellus, et efficitur sapien lectus sed metus. Vivamus non faucibus elit. Morbi finibus turpis eu tincidunt vulputate. Cras pharetra risus diam, sit amet vehicula augue eleifend ut. Sed non venenatis libero. Curabitur auctor arcu sagittis libero gravida, nec sodales tortor vulputate. Vivamus risus mi, scelerisque sit amet pharetra ac, fringilla a odio. Suspendisse aliquet ultrices luctus. Phasellus fringilla, est in pellentesque venenatis, dui mauris tempor ligula, in maximus velit enim vitae nulla.

Suspendisse congue sodales est. Suspendisse nisl ex, consectetur vel cursus sed, cursus sit amet sapien. Cras consequat massa venenatis nunc volutpat lobortis. Donec ornare blandit diam eget efficitur. Cras varius aliquet leo, nec finibus odio tincidunt non. Pellentesque mauris massa, accumsan quis tortor vitae, consectetur sollicitudin massa. Fusce eget vestibulum lacus, nec mollis orci. Vestibulum mauris velit, luctus vel lorem luctus, luctus porttitor dolor. Aenean iaculis ex eu ornare malesuada. Donec pellentesque lorem sit amet nisi congue, sit amet fringilla urna euismod. Vivamus consectetur mauris eu ligula blandit tristique. Nullam arcu mi, accumsan sit amet ipsum nec, scelerisque malesuada nisl.
        </p>
      </section>
      `}}customElements.define("operations-view",F);class B extends HTMLElement{constructor(){super(),this._shadowRoot=this.attachShadow({mode:"open"})}connectedCallback(){I(this.template(),this._shadowRoot,{eventContext:this})}template(){return D`
      <section>
        <h2>Sales projections content here</h2>
        <p>
          Suspendisse congue sodales est. Suspendisse nisl ex, consectetur vel cursus sed, cursus sit amet sapien. Cras consequat massa venenatis nunc volutpat lobortis. Donec ornare blandit diam eget efficitur. Cras varius aliquet leo, nec finibus odio tincidunt non. Pellentesque mauris massa, accumsan quis tortor vitae, consectetur sollicitudin massa. Fusce eget vestibulum lacus, nec mollis orci. Vestibulum mauris velit, luctus vel lorem luctus, luctus porttitor dolor. Aenean iaculis ex eu ornare malesuada. Donec pellentesque lorem sit amet nisi congue, sit amet fringilla urna euismod. Vivamus consectetur mauris eu ligula blandit tristique. Nullam arcu mi, accumsan sit amet ipsum nec, scelerisque malesuada nisl.

Donec maximus nulla risus, a euismod mauris ornare quis. Maecenas interdum lorem vitae felis convallis, eu fermentum eros sagittis. Integer vel metus id sem faucibus hendrerit. Duis in vulputate nisl. Curabitur a tincidunt justo. Praesent tincidunt tortor in lectus semper mattis. Nullam at facilisis nisi. Praesent eget enim ultrices, imperdiet felis a, fringilla risus. Integer faucibus ut enim nec dignissim. Sed congue ex nisl, vel fringilla metus finibus at. Duis sed iaculis elit. Interdum et malesuada fames ac ante ipsum primis in faucibus. Proin at blandit lorem. Etiam sollicitudin augue et odio maximus ullamcorper eu ac lorem.
        </p>
      </section>
      `}}customElements.define("sales-view",B);class W extends HTMLElement{constructor(){super(),this._shadowRoot=this.attachShadow({mode:"open"}),this._pathname="/"}get pathname(){return this._pathname}set pathname(e){this._pathname=e}_handleNavigation(e){switch(e){case"/":case"/coverages":case"/businessinfo":case"/operations":case"/sales":break;default:e="/"}this.pathname=e,I(this.template(),this._shadowRoot,{eventContext:this})}async connectedCallback(){I(this.template(),this._shadowRoot,{eventContext:this}),j(e=>this._handleNavigation(e.pathname)),window.history.pushState({},"","/"),this._handleNavigation()}disconnectedCallback(){this.removeEventListener("user",e=>this._getUserName(e),!1)}_openNav(){console.log("_openNav() invoked"),this._shadowRoot.querySelector("div#mySidenav").style.width="250px",this._shadowRoot.querySelector("main").style.marginLeft="250px",this._shadowRoot.querySelector("div#button").style.display="none"}_closeNav(){this._shadowRoot.querySelector("div#mySidenav").style.width="0",this._shadowRoot.querySelector("main").style.marginLeft="0",this._shadowRoot.querySelector("div#button").style.display="block"}template(){return D`
      <style>
        :host {
          display: block;
        }

        a {
          text-decoration: none;
        }

        header {
          width: 100%;
          min-height: 80px;
          background-color: #a1a1a1;
          padding-top: 10px;
          margin-bottom: 20px;
        }

        /* workaround for IE11 displaying <main> as inline */
        main {
          display: block;
        }

        .main-content {
          padding-top: 64px;
          padding-left: 3em;
          min-height: 100vh;
          width: 70%;
          margin-left: auto;
          margin-right: auto;
        }

        .pathname {
          display: none;
        }

        .pathname[active] {
          display: block;
        }
        /********* Dean, this is where I added your css ***/

        .sidenav {
          height: 100%;
          width: 0;
          position: fixed;
          z-index: 1;
          top: 0;
          left: 0;
          background-color: #111;
          overflow-x: hidden;
          transition: 0.5s;
          padding-top: 60px;
        }
        
        .sidenav a {
          padding: 8px 8px 8px 32px;
          text-decoration: none;
          font-size: 25px;
          color: #818181;
          display: block;
          transition: 0.3s;
        }
        
        .sidenav a:hover {
          color: #f1f1f1;
        }
        
        .sidenav .closebtn {
          position: absolute;
          top: 0;
          right: 25px;
          font-size: 36px;
          margin-left: 50px;
        }
        
        /* Dean, took out your main div
        #main {
          transition: margin-left .5s;
          padding: 16px;
        }
        */
        
        @media screen and (max-height: 450px) {
          .sidenav {padding-top: 15px;}
          .sidenav a {font-size: 18px;}
        }
      </style>

      <header>
        <!-- navigation bar -->
        <nav class="toolbar">
        </nav>
      </header>
      
      <!-- Dean, this is where I added your markup for sidenav  -->

      <div id="mySidenav" class="sidenav">
        <a href="javascript:void(0)" class="closebtn" @click=${this._closeNav}>&times;</a>
        <a href="/coverages">Coverages</a>
        <a href="/businessinfo">Business Info</a>
        <a href="/operations">Operations</a>
        <a href="sales">Sales Projections</a>
      </div>
      
      <div id="button">
        <span style="font-size:30px;cursor:pointer" @click=${this._openNav}>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &#9776; open</span>
        
      </div>

      <!-- main content -->
      <main role="main" class="main-content">
        <home-view class="pathname" ?active="${"/"===this.pathname}"></home-view>
        <coverages-view class="pathname" ?active="${"/coverages"===this.pathname}"></coverages-view>
        <businessinfo-view class="pathname" ?active="${"/businessinfo"===this.pathname}"></businessinfo-view>
        <operations-view class="pathname" ?active="${"/operations"===this.pathname}"></operations-view>
        <sales-view class="pathname" ?active="${"/sales"===this.pathname}"></sales-view>
      </main>
    `}}customElements.define("cannabis-app",W)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,